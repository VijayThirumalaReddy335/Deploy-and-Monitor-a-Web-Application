pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        DOCKER_IMAGE = 'vijaythirumalareddy335/first-application'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/VijayThirumalaReddy335/Deploy-and-Monitor-a-Web-Application.git'
                }
            }
        }

        stage('Code Linting and Unit Tests') {
            steps {
                script {
                    // Linting Java code using Maven Checkstyle plugin
                    sh 'mvn checkstyle:check'
                    // Running unit tests
                    sh 'mvn test'
                }
            }
        }

        stage('Build with Maven') {
            steps {
                script {
                    // Building the application using Maven
                    sh 'mvn clean package'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Building Docker image
                    dockerImage = docker.build("${env.DOCKER_IMAGE}:latest")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Pushing Docker image to Docker Hub
                    docker.withRegistry('https://index.docker.io/v1/', env.DOCKER_CREDENTIALS_ID) {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Infrastructure Provisioning with Terraform') {
            steps {
                script {
                    // Provisioning infrastructure using Terraform
                    sh '''
                    cd terraform
                    terraform init
                    terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'KUBECONFIG_CREDENTIALS', variable: 'KUBECONFIG')]) {
                    // Deploying to Kubernetes
                    sh '''
                    kubectl apply -f k8s/Kubernetes_FirstApplication.yaml
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
